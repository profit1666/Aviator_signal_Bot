import random, time, aiohttp, logging, asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta, timezone
from aiohttp import web

TOKEN = "7966917258:AAFlanH_miiwxkKjRHjSHms7R7RMrS9asHc"
MAIN_ADMIN_ID = 1463957271
ADMIN_IDS = {MAIN_ADMIN_ID}

bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
approved_users = set()
pending_users = {}
signal_usage = {}
stats = {"total_signals": 0, "users": set()}

# üåç –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
lang_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="English"), KeyboardButton(text="‡§π‡§ø‡§Ç‡§¶‡•Ä")]
], resize_keyboard=True)

signal_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì∂ Get Signal")]
], resize_keyboard=True)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã")],
        [KeyboardButton(text="‚è≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥"), KeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ª–∏–¥")],
        [KeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üóëÔ∏è –û—Ç–æ–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É")]
    ],
    resize_keyboard=True
)

# üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
async def get_country():
    async with aiohttp.ClientSession() as session:
        async with session.get("http://ip-api.com/json/?fields=country") as response:
            data = await response.json()
            return data.get("country", "Unknown")

# üì∂ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
def generate_signal():
    r = random.random()
    if r < 0.70:
        return round(random.uniform(1.00, 10.00), 2)
    elif r < 0.85:
        return round(random.uniform(10.1, 30.0), 2)
    elif r < 0.95:
        return round(random.uniform(30.1, 120.0), 2)
    elif r < 0.99:
        return round(random.uniform(120.1, 1200.0), 2)
    else:
        return round(random.uniform(1200.1, 20000.1), 2)

# üß† –õ–∏–º–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def check_limit(uid):
    now = datetime.now(timezone.utc)
    usage = signal_usage.get(uid, [])
    usage = [t for t in usage if now - t < timedelta(hours=1)]
    signal_usage[uid] = usage
    return len(usage) < 10

# üåê Web-—Ä—É—á–∫–∞ –¥–ª—è Render
async def ping(request):
    return web.Response(text="OK")

app = web.Application()
app.add_routes([web.get("/", ping)])
@dp.message(CommandStart())
async def cmd_start(msg: Message):
    uid = msg.from_user.id
    uname = msg.from_user.username or "None"
    fname = msg.from_user.first_name or ""
    if uid in ADMIN_IDS:
        await msg.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞", reply_markup=admin_kb)
        return
    if uid in approved_users:
        await msg.answer("üåê Choose your language:", reply_markup=lang_kb)
        return
    country = await get_country()
    pending_users[uid] = {"username": uname, "name": fname}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ Approve", callback_data=f"approve:{uid}"),
         InlineKeyboardButton(text="‚ùå Deny", callback_data=f"deny:{uid}")]
    ])
    await bot.send_message(
        MAIN_ADMIN_ID,
        f"üì• New access request:\nüë§ <b>{fname}</b> (@{uname})\nüÜî <code>{uid}</code>\nüåç Country: {country}",
        reply_markup=kb
    )
    await msg.answer("‚è≥ Waiting for admin approval...")

@dp.callback_query(F.data.startswith("approve:"))
async def approve_user(callback: CallbackQuery):
    uid = int(callback.data.split(":")[1])
    approved_users.add(uid)
    stats["users"].add(uid)
    await bot.send_message(uid, "‚úÖ You‚Äôve been approved!\nPlease choose your language:", reply_markup=lang_kb)
    await callback.message.edit_text("‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@dp.callback_query(F.data.startswith("deny:"))
async def deny_user(callback: CallbackQuery):
    uid = int(callback.data.split(":")[1])
    await bot.send_message(uid, "‚ùå Access denied.")
    await callback.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.message(F.text.in_({"English", "‡§π‡§ø‡§Ç‡§¶‡•Ä"}))
async def lang_chosen(msg: Message):
    uid = msg.from_user.id
    if uid not in approved_users:
        await msg.answer("‚ùå You‚Äôre not authorized to use signals.")
        return
    await msg.answer("üîî You have a limit of 10 signals per hour.", reply_markup=signal_kb)

@dp.message(F.text == "üì∂ Get Signal")
async def get_signal(msg: Message):
    uid = msg.from_user.id
    if uid not in approved_users:
        await msg.answer("‚ùå Access denied. Please wait for admin approval.")
        return
    if not check_limit(uid):
        await msg.answer("‚ö† You‚Äôve reached your signal limit. Try again in 1 hour.")
        return
    signal_usage.setdefault(uid, []).append(datetime.now(timezone.utc))
    stats["total_signals"] += 1
    await msg.answer("‚åõ Analyzing previous rounds...")
    time.sleep(1)
    await msg.answer("üì° Dispatching signal...")
    time.sleep(1)
    await msg.answer(f"üì∂ Your signal: <b>{generate_signal()}</b>")
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", F.from_user.id.in_(ADMIN_IDS))
async def stats_panel(msg: Message):
    await msg.answer(f"üìà –õ–∏–¥–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {len(approved_users)}\nüì∂ –í—ã–¥–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")

@dp.message(F.text == "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã", F.from_user.id.in_(ADMIN_IDS))
async def active_panel(msg: Message):
    txt = [f"{uid}" for uid in approved_users]
    await msg.answer("\n".join(txt) if txt else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥–æ–≤.")

@dp.message(F.text == "‚è≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø", F.from_user.id.in_(ADMIN_IDS))
async def pending_panel(msg: Message):
    txt = [f"{uid} @{info['username']}" for uid, info in pending_users.items()]
    await msg.answer("\n".join(txt) if txt else "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø.")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥", F.from_user.id.in_(ADMIN_IDS))
async def ask_add(msg: Message):
    await msg.answer("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø.")

@dp.message(F.text == "üö´ –£–¥–∞–ª–∏—Ç—å –ª–∏–¥", F.from_user.id.in_(ADMIN_IDS))
async def ask_remove(msg: Message):
    await msg.answer("üóë –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø.")

@dp.message(F.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", F.from_user.id.in_(ADMIN_IDS))
async def ask_add_admin(msg: Message):
    await msg.answer("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.")

@dp.message(F.text == "üóëÔ∏è –û—Ç–æ–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É", F.from_user.id.in_(ADMIN_IDS))
async def ask_remove_admin(msg: Message):
    await msg.answer("üóë –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.")

@dp.message(F.from_user.id.in_(ADMIN_IDS))
async def process_ids(msg: Message):
    if msg.text.isdigit():
        uid = int(msg.text)
        reply = msg.reply_to_message
        if reply:
            text = reply.text.lower()
            if "–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø" in text:
                approved_users.add(uid)
                stats["users"].add(uid)
                await msg.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ª–∏–¥—É: <code>{uid}</code>")
            elif "–æ—Ç–æ–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø" in text:
                approved_users.discard(uid)
                await msg.answer(f"üö´ –î–æ—Å—Ç—É–ø –æ—Ç–æ–±—Ä–∞–Ω —É –ª–∏–¥–∞: <code>{uid}</code>")
            elif "–≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É" in text:
                ADMIN_IDS.add(uid)
                await msg.answer(f"‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: <code>{uid}</code>")
            elif "–æ—Ç–æ–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É" in text:
                if uid == MAIN_ADMIN_ID:
                    await msg.answer("‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞!")
                elif uid in ADMIN_IDS:
                    ADMIN_IDS.discard(uid)
                    await msg.answer(f"üóë –ê–¥–º–∏–Ω —É–¥–∞–ª—ë–Ω: <code>{uid}</code>")
                else:
                    await msg.answer(f"‚ùå <code>{uid}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
async def start_all():
    bot_task = asyncio.create_task(dp.start_polling(bot))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=8080)
    await site.start()
    await bot_task

if __name__ == "__main__":
    asyncio.run(start_all())
